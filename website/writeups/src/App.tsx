import Question from "./components/Question";
import "./styles/Question.css";
import problemsData from "./assets/problemsData.json";

const questions = [
  "You are given two arrays of integers, each containing the same number of elements. The task is to compare each pair of elements from the two arrays at the same index. If the element in the first array is greater than the corresponding element in the second array, you need to swap the two elements at that index. After performing all necessary swaps based on this condition, output both arrays in their final state. The goal is to ensure that after all the swaps, each element in the first array is less than or equal to the corresponding element in the second array.",

  "A 'beautiful' number is a number that contains only the digits 8 and 9, and no other digits. Given a number `n`, you need to determine if `n` is divisible by any beautiful numbers between 8 and `n`. A beautiful number can be 8, 9, 88, 89, 98, 99, and so on. Your task is to identify all such beautiful numbers within the range and check if `n` is divisible by at least one of these. If `n` is divisible by any beautiful number, print 'beautiful'. If `n` is not divisible by any beautiful number, print -1.",

  "You are required to verify the validity of a student registration number based on specific criteria. The registration number should have exactly 9 characters. The first two characters should represent the year of joining (using two digits), followed by three uppercase letters, where the first letter must be 'B'. The next two characters should be digits. If the registration number meets these criteria, print 'YES'. Additionally, calculate the graduation year as four years after the joining year. If this graduation year falls between 2003 and 3000, print the graduation year; otherwise, skip printing it. If the registration number does not meet the criteria, print 'NO'.",

  "For a given number `n`, determine if it can be expressed as the sum of four consecutive positive integers. The problem requires you to find a sequence of four consecutive integers such that their sum equals `n`. If such a sequence exists, print '1' followed by the smallest integer in the sequence. If no such sequence exists, print '0'.",

  "You need to check if a given number `n` can be expressed as the sum of consecutive integers starting from 1, with the highest number in the series being a multiple of 4. For this, identify if there is a series of consecutive integers summing to `n`, where the largest number in the series is a multiple of 4. If such a series exists, print '1' and the largest number in this series; otherwise, print '0'.",

  "Given two numbers, you need to determine which one has a greater sum of its proper divisors (excluding 1 and the number itself). Calculate the sum of all proper divisors for each of the two numbers, then compare these sums. Print the number with the higher sum of divisors. If both sums are equal, print 'No dominance'.",

  "Encrypt a message using a specified key. The encryption process involves taking each character of the message and the corresponding character of the key, adding their ASCII values together, and converting the result back to a character. Both the message and the key should be of the same length. Output the encrypted message resulting from this process.",

  "Create a sequence of strings based on two initial strings in a manner similar to a Fibonacci sequence. Each subsequent string is generated by combining characters from the odd positions of the first string and the even positions of the second string. Characters are shifted one step ahead in the alphabet ('z' wraps around to 'a'). Repeat this process for `n-2` iterations, and print the final string in the sequence.",

  "Validate file movements within a filesystem using given directories, file IDs, and connections (edges) between directories. For each movement action describing a file's move from one directory to another, determine if this move is valid based on the connections between directories. If the file can be moved to the target directory, print 'yes'; otherwise, print 'no'.",

  "Hash a word by replacing consecutive repeated characters with a '#' symbol. For each word, replace sequences of consecutive identical characters with a single occurrence of the character followed by a '#'. After hashing the word, count the number of '#' symbols in the hashed word and print the count for each word.",

  "Determine the outcome of a race between Levi and the Beast based on their starting positions and Levi's moves. Given Levi's starting position, the number of moves, and the distance covered in each move, compute Levi's final position. Compare it with the Beast's position to find out who is ahead or if they are at the same position. Print 'Jaw' if Levi is ahead, 'Beast' if the Beast is ahead, or 'Levi' if both are at the same position.",

  "Transform a matrix based on specific rules and find the positions of certain values after transformation. The matrix transformation depends on the presence of specific values in rows or columns. After applying the transformation rules, identify and print the positions of the transformed values. If no values match the criteria, print 'No winner'.",

  "Generate all possible pairs of integers from 1 to `N` and count how many of these pairs have an odd sum. For a given number `N`, create a list of all pairs `(i, j)` where `1 <= i, j <= N`. Count and print the number of pairs where the sum of `i` and `j` is odd.",

  "Convert a given Earth time in the format HHMMSS into a specific format based on different time ranges. Depending on the given time, convert it into one of the following formats: 'A.M.', 'midmorning', 'B.M.', or 'C.M.'. The conversion is determined by specific time ranges and conditions.",

  "Calculate the number of unique rectangles that can be formed given a certain number of unit squares. For a given number of squares, determine how many distinct rectangles can be constructed. The rectangles should be counted based on their possible dimensions.",
];

function App() {
  return (
    <>
      {problemsData.map((problem, index) => (
        <Question
          key={index}
          question={problem.question}
          question_content={questions[index]}
          solution={problem.solution}
        />
      ))}
    </>
  );
}

export default App;
